{% extends 'admin/base.html.twig' %}

{% block page_title %}Add New Image{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .image-upload-container {
            border: 2px dashed #ddd;
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s;
            margin-bottom: 20px;
            height: 300px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            position: relative;
        }
        
        .image-upload-container:hover {
            border-color: #aaa;
            background-color: #f8f9fa;
        }
        
        .image-upload-container.has-image:hover .image-overlay {
            opacity: 1;
        }
        
        .image-upload-container i {
            font-size: 48px;
            color: #aaa;
            margin-bottom: 10px;
        }
        
        .image-upload-container.has-image .upload-placeholder {
            display: none;
        }
        
        .image-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0,0,0,0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            opacity: 0;
            transition: opacity 0.3s;
            border-radius: 6px;
        }
        
        .image-overlay .btn {
            margin: 0 5px;
        }
        
        #selectedImagePreview {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
        }
        
        /* Modal styles */
        .media-item {
            cursor: pointer;
            margin-bottom: 15px;
            border: 2px solid transparent;
            transition: all 0.2s;
            border-radius: 4px;
        }
        
        .media-item:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        
        .media-item.selected {
            border-color: #4e73df;
            box-shadow: 0 0 0 3px rgba(78, 115, 223, 0.3);
        }
        
        .media-item img {
            width: 100%;
            height: 150px;
            object-fit: cover;
            border-radius: 4px;
        }
        
        .media-library-container {
            max-height: 500px;
            overflow-y: auto;
        }
    </style>
{% endblock %}

{% block admin_content %}
    <div class="d-flex justify-content-between mb-4">
        <div>
            <h2 class="mb-0">Add New Image</h2>
            <p class="text-muted">Upload a new image or select from your library</p>
        </div>
        <div>
            <a href="{{ path('app_admin_image_index') }}" class="btn btn-secondary">
                <i class="fas fa-arrow-left me-2"></i> Back to Images
            </a>
        </div>
    </div>

    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Image Details</h6>
        </div>
        <div class="card-body">
            {{ form_start(form) }}
                <div class="row">
                    <div class="col-md-6">
                        <div class="image-upload-container" id="imageUploadContainer">
                            <div class="upload-placeholder">
                                <i class="fas fa-image"></i>
                                <p class="mb-0">Click to upload or select an image</p>
                                <small class="text-muted">Supports JPG, PNG and GIF</small>
                            </div>
                            <img id="selectedImagePreview" style="display: none;" />
                            <div class="image-overlay">
                                <button type="button" class="btn btn-primary btn-sm" id="uploadButton">
                                    <i class="fas fa-upload me-1"></i> Upload
                                </button>
                                <button type="button" class="btn btn-info btn-sm" id="libraryButton">
                                    <i class="fas fa-th me-1"></i> Media Library
                                </button>
                            </div>
                        </div>
                        <div id="imageSources" class="mb-3">
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="image_source" id="source_upload" value="upload" checked>
                                <label class="form-check-label" for="source_upload">Upload New Image</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="image_source" id="source_path" value="path">
                                <label class="form-check-label" for="source_path">Use File Path</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="image_source" id="source_library" value="library">
                                <label class="form-check-label" for="source_library">Select from Library</label>
                            </div>
                        </div>
                        
                        <!-- File upload is hidden and triggered by JS -->
                        <div class="d-none">
                            {{ form_row(form.upload_method) }}
                            {{ form_row(form.file) }}
                            <input type="hidden" name="selected_library_image" id="selectedLibraryImage">
                        </div>

                        <!-- Path input field -->
                        <div id="pathInputContainer" class="mb-3" style="display: none;">
                            {{ form_row(form.file_path) }}
                            <button type="button" class="btn btn-sm btn-outline-secondary" id="verifyPathBtn">Verify Path</button>
                            <div id="pathVerificationResult" class="mt-2"></div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        {{ form_row(form.title) }}
                        {{ form_row(form.alt) }}
                        {{ form_row(form.category) }}
                        {{ form_row(form.description) }}
                        
                        {% if form.purpose is defined %}
                            {{ form_row(form.purpose, {
                                'attr': {'class': 'form-control'},
                                'choice_attr': {
                                    'hero': {'data-description': 'Used as homepage hero header background'}
                                }
                            }) }}
                        {% endif %}
                        
                        {% if form.dish is defined %}
                            {{ form_row(form.dish) }}
                        {% endif %}
                    </div>
                </div>
                
                <div class="text-end mt-3">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-2"></i> Save Image
                    </button>
                </div>
            {{ form_end(form) }}
        </div>
    </div>
    
    <!-- Media Library Modal -->
    <div class="modal fade" id="mediaLibraryModal" tabindex="-1" aria-labelledby="mediaLibraryModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="mediaLibraryModalLabel">Select Image from Media Library</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <div class="input-group">
                            <input type="text" class="form-control" id="mediaSearchInput" placeholder="Search images...">
                            <button class="btn btn-outline-secondary" type="button" id="mediaSearchButton">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </div>
                    
                    <div class="text-center py-5" id="mediaLoadingIndicator">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Loading media library...</p>
                    </div>
                    
                    <div class="media-library-container">
                        <div class="row" id="mediaLibraryItems"></div>
                    </div>
                    
                    <div class="alert alert-info mt-3" id="noMediaMessage" style="display: none;">
                        No images found in your media library.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="selectMediaButton" disabled>Select Image</button>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block admin_javascripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const imageUploadContainer = document.getElementById('imageUploadContainer');
        const uploadButton = document.getElementById('uploadButton');
        const libraryButton = document.getElementById('libraryButton');
        const fileInput = document.getElementById('{{ form.file.vars.id }}');
        const uploadMethodInput = document.getElementById('{{ form.upload_method.vars.id }}');
        const selectedImagePreview = document.getElementById('selectedImagePreview');
        const selectedLibraryImageInput = document.getElementById('selectedLibraryImage');
        const sourceUploadRadio = document.getElementById('source_upload');
        const sourcePathRadio = document.getElementById('source_path');
        const sourceLibraryRadio = document.getElementById('source_library');
        const pathInputContainer = document.getElementById('pathInputContainer');
        const filePathInput = document.getElementById('{{ form.file_path.vars.id }}');
        const verifyPathBtn = document.getElementById('verifyPathBtn');
        const pathVerificationResult = document.getElementById('pathVerificationResult');
        
        // Media Library Modal Elements
        const mediaLibraryModal = new bootstrap.Modal(document.getElementById('mediaLibraryModal'));
        const mediaLoadingIndicator = document.getElementById('mediaLoadingIndicator');
        const mediaLibraryItems = document.getElementById('mediaLibraryItems');
        const noMediaMessage = document.getElementById('noMediaMessage');
        const selectMediaButton = document.getElementById('selectMediaButton');
        const mediaSearchInput = document.getElementById('mediaSearchInput');
        
        let selectedMediaId = null;
        let mediaLoaded = false;
        
        // Setup click handlers for the image container
        imageUploadContainer.addEventListener('click', function() {
            if (sourceUploadRadio.checked) {
                fileInput.click();
            } else if (sourceLibraryRadio.checked) {
                openMediaLibrary();
            }
            // Don't do anything special for path mode
        });
        
        // Direct button handlers
        uploadButton.addEventListener('click', function(e) {
            e.stopPropagation(); // Prevent event bubbling
            sourceUploadRadio.checked = true;
            updateUploadMethod('upload');
            fileInput.click();
        });
        
        libraryButton.addEventListener('click', function(e) {
            e.stopPropagation(); // Prevent event bubbling
            sourceLibraryRadio.checked = true;
            updateUploadMethod('existing');
            openMediaLibrary();
        });
        
        // File input change handler
        fileInput.addEventListener('change', function() {
            if (this.files && this.files[0]) {
                const file = this.files[0];
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    selectedImagePreview.src = e.target.result;
                    selectedImagePreview.style.display = 'block';
                    imageUploadContainer.classList.add('has-image');
                    imageUploadContainer.style.backgroundImage = `url(${e.target.result})`;
                }
                
                reader.readAsDataURL(file);
                uploadMethodInput.value = 'upload';
                selectedLibraryImageInput.value = '';
                sourceUploadRadio.checked = true;
            }
        });
        
        // Radio button change handlers
        sourceUploadRadio.addEventListener('change', function() {
            if (this.checked) {
                updateUploadMethod('upload');
            }
        });
        
        sourcePathRadio.addEventListener('change', function() {
            if (this.checked) {
                updateUploadMethod('path');
            }
        });
        
        sourceLibraryRadio.addEventListener('change', function() {
            if (this.checked) {
                updateUploadMethod('existing');
                openMediaLibrary();
            }
        });
        
        // Update form based on selected upload method
        function updateUploadMethod(method) {
            uploadMethodInput.value = method;
            
            // Hide/show the appropriate containers
            if (method === 'path') {
                pathInputContainer.style.display = 'block';
            } else {
                pathInputContainer.style.display = 'none';
            }
        }
        
        // Verify path button
        verifyPathBtn.addEventListener('click', function() {
            const path = filePathInput.value.trim();
            
            if (!path) {
                pathVerificationResult.innerHTML = '<div class="alert alert-warning">Please enter a file path</div>';
                return;
            }
            
            // Send AJAX request to verify if file exists
            fetch('/admin/api/verify-path', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': '{{ csrf_token("verify_path") }}'
                },
                body: JSON.stringify({ path: path })
            })
            .then(response => response.json())
            .then(data => {
                if (data.exists) {
                    pathVerificationResult.innerHTML = `
                        <div class="alert alert-success">
                            <strong>File exists!</strong> ${data.mime_type || ''}
                            ${data.preview ? `<img src="${data.preview}" class="img-fluid mt-2" style="max-height: 100px;">` : ''}
                        </div>
                    `;
                } else {
                    pathVerificationResult.innerHTML = `
                        <div class="alert alert-danger">
                            <strong>File not found or not readable.</strong> ${data.error || ''}
                        </div>
                    `;
                }
            })
            .catch(error => {
                pathVerificationResult.innerHTML = `
                    <div class="alert alert-danger">
                        Error verifying path: ${error}
                    </div>
                `;
            });
        });
        
        // Media Library functions
        function openMediaLibrary() {
            mediaLibraryModal.show();
            
            // Only load media items if they haven't been loaded yet
            if (!mediaLoaded) {
                loadMediaItems();
            }
        }
        
        function loadMediaItems() {
            mediaLoadingIndicator.style.display = 'block';
            mediaLibraryItems.innerHTML = '';
            noMediaMessage.style.display = 'none';
            selectMediaButton.disabled = true;
            selectedMediaId = null;
            
            // Fetch media library items
            fetch('/admin/api/media')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    mediaLoadingIndicator.style.display = 'none';
                    mediaLoaded = true;
                    
                    if (!data || data.length === 0) {
                        noMediaMessage.style.display = 'block';
                        return;
                    }
                    
                    renderMediaItems(data);
                })
                .catch(error => {
                    console.error('Error fetching media library:', error);
                    mediaLoadingIndicator.style.display = 'none';
                    mediaLibraryItems.innerHTML = `
                        <div class="col-12">
                            <div class="alert alert-danger">
                                Error loading media library. Please try again later.
                            </div>
                        </div>
                    `;
                });
        }
        
        function renderMediaItems(items) {
            mediaLibraryItems.innerHTML = '';
            
            items.forEach(item => {
                const mediaItem = document.createElement('div');
                mediaItem.className = 'col-md-3 mb-3';
                mediaItem.innerHTML = `
                    <div class="media-item" data-id="${item.id}">
                        <img src="/uploads/images/${item.filename}" alt="${item.alt || ''}" class="img-fluid">
                        <div class="p-2">
                            <p class="mb-0 text-truncate">${item.title || item.alt || 'Untitled'}</p>
                        </div>
                    </div>
                `;
                
                const mediaItemElement = mediaItem.querySelector('.media-item');
                mediaItemElement.addEventListener('click', function(e) {
                    e.stopPropagation(); // Prevent event bubbling
                    
                    // Unselect all items
                    document.querySelectorAll('.media-item').forEach(el => {
                        el.classList.remove('selected');
                    });
                    
                    // Select this item
                    this.classList.add('selected');
                    selectedMediaId = this.dataset.id;
                    selectMediaButton.disabled = false;
                });
                
                mediaLibraryItems.appendChild(mediaItem);
            });
        }
        
        // Search media
        mediaSearchInput.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            
            document.querySelectorAll('.media-item').forEach(item => {
                const title = item.querySelector('p').textContent.toLowerCase();
                
                if (title.includes(searchTerm)) {
                    item.parentElement.style.display = 'block';
                } else {
                    item.parentElement.style.display = 'none';
                }
            });
        });
        
        // Select media button handler
        selectMediaButton.addEventListener('click', function() {
            if (selectedMediaId) {
                // Find the selected item data
                const selectedItem = document.querySelector(`.media-item[data-id="${selectedMediaId}"]`);
                const imageUrl = selectedItem.querySelector('img').src;
                
                // Update form values
                selectedLibraryImageInput.value = selectedMediaId;
                uploadMethodInput.value = 'existing';
                sourceLibraryRadio.checked = true;
                
                // Update preview
                selectedImagePreview.src = imageUrl;
                selectedImagePreview.style.display = 'block';
                imageUploadContainer.classList.add('has-image');
                imageUploadContainer.style.backgroundImage = `url(${imageUrl})`;
                
                // Close modal
                mediaLibraryModal.hide();
            }
        });
    });
</script>
{% endblock %}
