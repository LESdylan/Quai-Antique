doctrine:
    dbal:
        # Use a more basic driver setup
        driver: 'pdo_mysql'
        server_version: '5.7' # Explicitly set MySQL version compatibility
        charset: utf8mb4
        default_table_options:
            charset: utf8mb4
            collate: utf8mb4_unicode_ci
        url: '%env(resolve:DATABASE_URL)%'
        schema_filter: ~^(?!i_c\.)~  # Exclude information_schema tables
        mapping_types:
            enum: string
        # Replace the unsupported driver_options with the supported options parameter
        options:
            1002: "SET sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''))"
        # Add platform_service to use our custom MySQL platform
        platform_service: App\Doctrine\CustomMySQLPlatform

    orm:
        auto_generate_proxy_classes: true
        enable_lazy_ghost_objects: true
        report_fields_where_declared: true
        validate_xml_mapping: true
        naming_strategy: doctrine.orm.naming_strategy.underscore_number_aware
        auto_mapping: true
        mappings:
            App:
                type: attribute
                dir: '%kernel.project_dir%/src/Entity'
                prefix: 'App\Entity'
                alias: App

when@test:
    doctrine:
        dbal:
            # Use SQLite for testing
            driver: pdo_sqlite
            path: '%kernel.project_dir%/var/test.db'
            url: null

when@prod:
    doctrine:
        orm:
            auto_generate_proxy_classes: false
            proxy_dir: '%kernel.build_dir%/doctrine/orm/Proxies'
            query_cache_driver:
                type: pool
                pool: doctrine.system_cache_pool
            result_cache_driver:
                type: pool
                pool: doctrine.result_cache_pool

    framework:
        cache:
            pools:
                doctrine.result_cache_pool:
                    adapter: cache.app
                doctrine.system_cache_pool:
                    adapter: cache.system
